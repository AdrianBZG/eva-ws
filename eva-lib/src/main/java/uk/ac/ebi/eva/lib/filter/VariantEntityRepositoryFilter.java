/*
 * European Variation Archive (EVA) - Open-access database of all types of genetic
 * variation data from all species
 *
 * Copyright 2017 EMBL - European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.ac.ebi.eva.lib.filter;

import org.springframework.data.mongodb.core.query.Criteria;

import uk.ac.ebi.eva.lib.repository.VariantEntityRepository;

public abstract class VariantEntityRepositoryFilter<T> {

    private final String FIELD;
    private final T VALUE;
    private final VariantEntityRepository.RelationalOperator OPERATOR;

    public VariantEntityRepositoryFilter(String field, T value, VariantEntityRepository.RelationalOperator operator) {
        this.FIELD = field;
        this.VALUE = value;
        this.OPERATOR = operator;
    }

    public Criteria getCriteria() {
        Criteria criteria = Criteria.where(FIELD);

        switch (OPERATOR) {
            case EQ:
                criteria = criteria.is(VALUE);
                break;
            case GT:
                criteria = criteria.gt(VALUE);
                break;
            case LT:
                criteria = criteria.lt(VALUE);
                break;
            case GTE:
                criteria = criteria.gte(VALUE);
                break;
            case LTE:
                criteria = criteria.lte(VALUE);
                break;
            case IN:
                criteria = criteria.in(VALUE);
                break;
            default:
                throw new IllegalArgumentException();
        }

        return criteria;
    }

    protected static Double getValueFromRelation(String relation) {
        return Double.parseDouble(relation.replaceAll("[^\\d.]", ""));
    }

    protected static VariantEntityRepository.RelationalOperator getRelationalOperatorFromRelation(String relation) {
        String relationalOperatorString = relation.replaceAll("[^<>=]", "");

        switch (relationalOperatorString) {
            case "=":
                return VariantEntityRepository.RelationalOperator.EQ;
            case ">":
                return VariantEntityRepository.RelationalOperator.GT;
            case "<":
                return VariantEntityRepository.RelationalOperator.LT;
            case ">=":
                return VariantEntityRepository.RelationalOperator.GTE;
            case "<=":
                return VariantEntityRepository.RelationalOperator.LTE;
            default:
                throw new IllegalArgumentException();
        }

    }

    // equals and hashcode methods generated by intellij
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof VariantEntityRepositoryFilter)) {
            return false;
        }

        VariantEntityRepositoryFilter<?> that = (VariantEntityRepositoryFilter<?>) o;

        if (!FIELD.equals(that.FIELD)) {
            return false;
        }
        if (!VALUE.equals(that.VALUE)) {
            return false;
        }
        return OPERATOR == that.OPERATOR;
    }

    @Override
    public int hashCode() {
        int result = FIELD.hashCode();
        result = 31 * result + VALUE.hashCode();
        result = 31 * result + OPERATOR.hashCode();
        return result;
    }

}
